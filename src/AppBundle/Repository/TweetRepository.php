<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Tweet;
use AppBundle\Entity\User;
use Doctrine\ORM\QueryBuilder;

const USER_ID_WHERE = 't.user = :user_id';
const USER_ID_PLACEHOLDER = ':user_id';
const FULL_TEXT_SELECT = 'MATCH_AGAINST (t.text, :tweet) as score';
const FULL_TEXT_WHERE = 'MATCH_AGAINST(t.text, :tweet) > 0';
const TWEET_PLACEHOLDER = ':tweet';

const TWEET_TEXT = 't.text';
const USER_NAME = 'u.name';
const USER_SCREEN_NAME = 'u.screenName';

const USER_ENTITY = 'AppBundle:User';
const JOIN_CONDITION_TYPE = 'WITH';
const JOIN_CONDITION = 't.user = u.id';


/**
 * TweetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TweetRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * If user is included in full text search
     *
     * @param QueryBuilder $tweetsQuery
     * @param $user_id
     * @return QueryBuilder
     */
    private function userId(QueryBuilder $tweetsQuery, $user_id)
    {
        return $tweetsQuery = $tweetsQuery
            ->andWhere(USER_ID_WHERE)
            ->setParameter(USER_ID_PLACEHOLDER, $user_id);
    }

    /**
     * If tweet text is included in full text search
     *
     * @param QueryBuilder $tweetsQuery
     * @param $searchTerm
     * @return QueryBuilder
     */
    private function tweetText(QueryBuilder $tweetsQuery, $searchTerm)
    {
        return $tweetsQuery
            ->addSelect(FULL_TEXT_SELECT)
            ->andWhere(FULL_TEXT_WHERE)
            ->setParameter(TWEET_PLACEHOLDER, $searchTerm);
    }

    /**
     * Filtering null params
     *
     * @param array $parameters
     * @return array
     */
    private function filterParameters(array $parameters)
    {
        return array_filter($parameters, function ($item) {
            if (!is_null($item)) {
                return $item;
            }
        });
    }

    /**
     * Full text search method
     *
     * @param array $parameters
     * @return \Doctrine\ORM\Query
     */
    public function fullTextSearch(array $parameters)
    {
        $parameters = $this->filterParameters($parameters);

        $tweetsQuery = $this->createQueryBuilder('t')
            ->addSelect(TWEET_TEXT)
            ->addSelect(USER_NAME)
            ->addSelect(USER_SCREEN_NAME)
            ->innerJoin(USER_ENTITY, 'u', JOIN_CONDITION_TYPE, JOIN_CONDITION);

        foreach ($parameters as $param => $value) {
            $this->{$param}($tweetsQuery, $value);
        }

        return $tweetsQuery->getQuery();
    }

    /**
     * Saves Tweets and connects them to User entity
     *
     * @param array $tweet_array
     * @param User $user
     */
    public function saveTweets(array $tweet_array, User $user)
    {
        $em = $this->getEntityManager();

        foreach ($tweet_array as $tweet_object) {
            $tweet = new Tweet();
            $tweet->setText($tweet_object->text);
            $tweet->setTweeterId($tweet_object->id_str);
            $user->addTweet($tweet);
            $em->persist($tweet);
            $em->persist($user);
        }
        $em->flush();
    }
}
